=begin
#Draft Orders API

#Shopify Draft Orders API

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Return count
    # Returns count of draft orders
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def admin_draft_orders_count_json_get(opts = {})
      data, _status_code, _headers = admin_draft_orders_count_json_get_with_http_info(opts)
      return data
    end

    # Return count
    # Returns count of draft orders
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def admin_draft_orders_count_json_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.admin_draft_orders_count_json_get ..."
      end
      # resource path
      local_var_path = "/admin/draft_orders/count.json".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#admin_draft_orders_count_json_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets draft orders test test test
    # Retrieve a list of all Draft Orders please !!!! and thank you
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-separated list of fields to include in the response
    # @option opts [Integer] :limit Page size
    # @option opts [Integer] :page Page to show
    # @return [DraftOrder]
    def admin_draft_orders_json_get(opts = {})
      data, _status_code, _headers = admin_draft_orders_json_get_with_http_info(opts)
      return data
    end

    # Gets draft orders test test test
    # Retrieve a list of all Draft Orders please !!!! and thank you
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-separated list of fields to include in the response
    # @option opts [Integer] :limit Page size
    # @option opts [Integer] :page Page to show
    # @return [Array<(DraftOrder, Fixnum, Hash)>] DraftOrder data, response status code and response headers
    def admin_draft_orders_json_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.admin_draft_orders_json_get ..."
      end
      # resource path
      local_var_path = "/admin/draft_orders.json".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DraftOrder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#admin_draft_orders_json_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a draft order
    # send a draft order in body of the request
    # @param draftorder The draft order to create.
    # @param [Hash] opts the optional parameters
    # @return [DraftOrder]
    def admin_draft_orders_json_post(draftorder, opts = {})
      data, _status_code, _headers = admin_draft_orders_json_post_with_http_info(draftorder, opts)
      return data
    end

    # Creates a draft order
    # send a draft order in body of the request
    # @param draftorder The draft order to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DraftOrder, Fixnum, Hash)>] DraftOrder data, response status code and response headers
    def admin_draft_orders_json_post_with_http_info(draftorder, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.admin_draft_orders_json_post ..."
      end
      # verify the required parameter 'draftorder' is set
      fail ArgumentError, "Missing the required parameter 'draftorder' when calling DefaultApi.admin_draft_orders_json_post" if draftorder.nil?
      # resource path
      local_var_path = "/admin/draft_orders.json".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(draftorder)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DraftOrder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#admin_draft_orders_json_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or retrieve existing checkout for this draft order, to be used in Checkout API. Requires checkout scope
    # 
    # @param id2 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id id of the draft order
    # @return [Checkout]
    def admin_draft_ordersid_checkout_json_post(id2, opts = {})
      data, _status_code, _headers = admin_draft_ordersid_checkout_json_post_with_http_info(id2, opts)
      return data
    end

    # Create or retrieve existing checkout for this draft order, to be used in Checkout API. Requires checkout scope
    # 
    # @param id2 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id id of the draft order
    # @return [Array<(Checkout, Fixnum, Hash)>] Checkout data, response status code and response headers
    def admin_draft_ordersid_checkout_json_post_with_http_info(id2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.admin_draft_ordersid_checkout_json_post ..."
      end
      # verify the required parameter 'id2' is set
      fail ArgumentError, "Missing the required parameter 'id2' when calling DefaultApi.admin_draft_ordersid_checkout_json_post" if id2.nil?
      # resource path
      local_var_path = "/admin/draft_orders/#{id}/checkout.json".sub('{format}','json').sub('{' + 'id' + '}', id2.to_s)

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Checkout')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#admin_draft_ordersid_checkout_json_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a Draft Order from the database
    # 
    # @param id2 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id id of the draft order
    # @option opts [Integer] :payment_gateway_id Gateway used to receive payment. Either ID of custom manual gateway, or null if using the default “Mark As Paid” gateway.
    # @option opts [BOOLEAN] :payment_pending true/false
    # @return [DraftOrder]
    def admin_draft_ordersid_complete_json_put(id2, opts = {})
      data, _status_code, _headers = admin_draft_ordersid_complete_json_put_with_http_info(id2, opts)
      return data
    end

    # Remove a Draft Order from the database
    # 
    # @param id2 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id id of the draft order
    # @option opts [Integer] :payment_gateway_id Gateway used to receive payment. Either ID of custom manual gateway, or null if using the default “Mark As Paid” gateway.
    # @option opts [BOOLEAN] :payment_pending true/false
    # @return [Array<(DraftOrder, Fixnum, Hash)>] DraftOrder data, response status code and response headers
    def admin_draft_ordersid_complete_json_put_with_http_info(id2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.admin_draft_ordersid_complete_json_put ..."
      end
      # verify the required parameter 'id2' is set
      fail ArgumentError, "Missing the required parameter 'id2' when calling DefaultApi.admin_draft_ordersid_complete_json_put" if id2.nil?
      # resource path
      local_var_path = "/admin/draft_orders/#{id}/complete.json".sub('{format}','json').sub('{' + 'id' + '}', id2.to_s)

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'payment_gateway_id'] = opts[:'payment_gateway_id'] if !opts[:'payment_gateway_id'].nil?
      query_params[:'paymentPending'] = opts[:'payment_pending'] if !opts[:'payment_pending'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DraftOrder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#admin_draft_ordersid_complete_json_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # removes a draft order from the database.
    # retruns {}
    # @param id draft order id
    # @param [Hash] opts the optional parameters
    # @return [DraftOrder]
    def admin_draft_ordersid_json_delete(id, opts = {})
      data, _status_code, _headers = admin_draft_ordersid_json_delete_with_http_info(id, opts)
      return data
    end

    # removes a draft order from the database.
    # retruns {}
    # @param id draft order id
    # @param [Hash] opts the optional parameters
    # @return [Array<(DraftOrder, Fixnum, Hash)>] DraftOrder data, response status code and response headers
    def admin_draft_ordersid_json_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.admin_draft_ordersid_json_delete ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.admin_draft_ordersid_json_delete" if id.nil?
      # resource path
      local_var_path = "/admin/draft_orders/#{id}.json".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DraftOrder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#admin_draft_ordersid_json_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Receive a single Draft Order
    # Receive a single Draft Order
    # @param id draft order id
    # @param [Hash] opts the optional parameters
    # @return [DraftOrder]
    def admin_draft_ordersid_json_get(id, opts = {})
      data, _status_code, _headers = admin_draft_ordersid_json_get_with_http_info(id, opts)
      return data
    end

    # Receive a single Draft Order
    # Receive a single Draft Order
    # @param id draft order id
    # @param [Hash] opts the optional parameters
    # @return [Array<(DraftOrder, Fixnum, Hash)>] DraftOrder data, response status code and response headers
    def admin_draft_ordersid_json_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.admin_draft_ordersid_json_get ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.admin_draft_ordersid_json_get" if id.nil?
      # resource path
      local_var_path = "/admin/draft_orders/#{id}.json".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DraftOrder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#admin_draft_ordersid_json_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify an existing draft order
    # Modify an existing draft order. ### Example   Only showing the parameters needed to select a particular shipping rate as returned from     `GET /admin/draft_orders/#{id}/shipping_rates`       draft_order: {       shipping_line: {         handle: ,         phone:       }     }     
    # @param id draft order id
    # @param [Hash] opts the optional parameters
    # @option opts [DraftOrder] :draft_order the draft order to modify.
    # @return [DraftOrder]
    def admin_draft_ordersid_json_put(id, opts = {})
      data, _status_code, _headers = admin_draft_ordersid_json_put_with_http_info(id, opts)
      return data
    end

    # Modify an existing draft order
    # Modify an existing draft order. ### Example   Only showing the parameters needed to select a particular shipping rate as returned from     &#x60;GET /admin/draft_orders/#{id}/shipping_rates&#x60;       draft_order: {       shipping_line: {         handle: ,         phone:       }     }     
    # @param id draft order id
    # @param [Hash] opts the optional parameters
    # @option opts [DraftOrder] :draft_order the draft order to modify.
    # @return [Array<(DraftOrder, Fixnum, Hash)>] DraftOrder data, response status code and response headers
    def admin_draft_ordersid_json_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.admin_draft_ordersid_json_put ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.admin_draft_ordersid_json_put" if id.nil?
      # resource path
      local_var_path = "/admin/draft_orders/#{id}.json".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'draft_order'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DraftOrder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#admin_draft_ordersid_json_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send Invoice - “Minimal request” does not require any parameters to be sent (no request body at all or just an empty draft_order_invoice hash)
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [DraftOrderInvoice] :draft_order_invoice draft_order_invoice to post.
    # @return [DraftOrderInvoice]
    def admin_draft_ordersid_send_invoice_json_post(id, opts = {})
      data, _status_code, _headers = admin_draft_ordersid_send_invoice_json_post_with_http_info(id, opts)
      return data
    end

    # Send Invoice - “Minimal request” does not require any parameters to be sent (no request body at all or just an empty draft_order_invoice hash)
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [DraftOrderInvoice] :draft_order_invoice draft_order_invoice to post.
    # @return [Array<(DraftOrderInvoice, Fixnum, Hash)>] DraftOrderInvoice data, response status code and response headers
    def admin_draft_ordersid_send_invoice_json_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.admin_draft_ordersid_send_invoice_json_post ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.admin_draft_ordersid_send_invoice_json_post" if id.nil?
      # resource path
      local_var_path = "/admin/draft_orders/#{id}/send_invoice.json".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'draft_order_invoice'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DraftOrderInvoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#admin_draft_ordersid_send_invoice_json_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # gets shipping rates for a specific draft order
    # Get a list of available shipping rates for the specified draft order. Implementers will need to poll this endpoint until rates become available. Calling this endpoint without first specifying a shipping address on the draft order will return an error response. Possible responses outlined below.    #### Rates have been requested and are available   ```    # Response HTTP/1.1 200 OK {   \"shipping_rates\": [     {       \"handle\": \"shopify-Standard%20Shipping-10.00\",       “phone_required”: false,       \"price\": \"10.00\",       \"title\": \"Standard Shipping\",       “draft_order”:        {          “subtotal_price”: “10.00”,          “total_price”: “21.50”,          “total_tax”: “1.50”       }     },     {       \"handle\": \"ups-11-19.45\",       “phone_required”: false,       \"price\": \"19.45\",       \"title\": \"UPS Standard\",       “draft_order”:        {          “subtotal_price”: “10.00”,          “total_price”: “30.95”,          “total_tax”: “1.50”       }     },     {       \"handle\": \"ups-02-19.69\",       “phone_required”: true,       \"price\": \"19.69\",       \"title\": \"UPS Expedited\",       “draft_order”:        {          “subtotal_price”: “10.00”,          “total_price”: “31.19”,          “total_tax”: “1.50”       }     }   ] }        ```   #### Rates have been requested but none are available for the current shipping address      # Response     HTTP/1.1 200 OK     {       \"shipping_rates\": []     } 
    # @param id2 draft order id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id id of the draft order
    # @return [ShippingRate]
    def admin_draft_ordersid_shipping_rates_json_get(id2, opts = {})
      data, _status_code, _headers = admin_draft_ordersid_shipping_rates_json_get_with_http_info(id2, opts)
      return data
    end

    # gets shipping rates for a specific draft order
    # Get a list of available shipping rates for the specified draft order. Implementers will need to poll this endpoint until rates become available. Calling this endpoint without first specifying a shipping address on the draft order will return an error response. Possible responses outlined below.    #### Rates have been requested and are available   &#x60;&#x60;&#x60;    # Response HTTP/1.1 200 OK {   \&quot;shipping_rates\&quot;: [     {       \&quot;handle\&quot;: \&quot;shopify-Standard%20Shipping-10.00\&quot;,       “phone_required”: false,       \&quot;price\&quot;: \&quot;10.00\&quot;,       \&quot;title\&quot;: \&quot;Standard Shipping\&quot;,       “draft_order”:        {          “subtotal_price”: “10.00”,          “total_price”: “21.50”,          “total_tax”: “1.50”       }     },     {       \&quot;handle\&quot;: \&quot;ups-11-19.45\&quot;,       “phone_required”: false,       \&quot;price\&quot;: \&quot;19.45\&quot;,       \&quot;title\&quot;: \&quot;UPS Standard\&quot;,       “draft_order”:        {          “subtotal_price”: “10.00”,          “total_price”: “30.95”,          “total_tax”: “1.50”       }     },     {       \&quot;handle\&quot;: \&quot;ups-02-19.69\&quot;,       “phone_required”: true,       \&quot;price\&quot;: \&quot;19.69\&quot;,       \&quot;title\&quot;: \&quot;UPS Expedited\&quot;,       “draft_order”:        {          “subtotal_price”: “10.00”,          “total_price”: “31.19”,          “total_tax”: “1.50”       }     }   ] }        &#x60;&#x60;&#x60;   #### Rates have been requested but none are available for the current shipping address      # Response     HTTP/1.1 200 OK     {       \&quot;shipping_rates\&quot;: []     } 
    # @param id2 draft order id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id id of the draft order
    # @return [Array<(ShippingRate, Fixnum, Hash)>] ShippingRate data, response status code and response headers
    def admin_draft_ordersid_shipping_rates_json_get_with_http_info(id2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.admin_draft_ordersid_shipping_rates_json_get ..."
      end
      # verify the required parameter 'id2' is set
      fail ArgumentError, "Missing the required parameter 'id2' when calling DefaultApi.admin_draft_ordersid_shipping_rates_json_get" if id2.nil?
      # resource path
      local_var_path = "/admin/draft_orders/#{id}/shipping_rates.json'".sub('{format}','json').sub('{' + 'id' + '}', id2.to_s)

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShippingRate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#admin_draft_ordersid_shipping_rates_json_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
