# coding: utf-8

"""
    Draft Orders API

    ### Draft Orders API       This API is about operations you can perform on the draft order object as defind below:  Field | Definition | Data Type   -----|-----------|-------------------------   `id`| `id` of the draft order |`string`   `order_id`  | The id of the order associated to the draft order, once created. | `string`           `name` | Name of the draft order, format #D<number>, where number, is an sequential identifier unique to the shop, starting at 1. For example #D133 | `integer`   `customer` | Customer object will be serialized with only the default address, however only the ID can be set in order to associate the customer to the draft order. Setting the value to null removes the customer from the draft order. | `object`   `shipping_address` | The mailing address to where the draft order will be shipped. | `string`   `billing_address` | The mailing address associated with the payment method. | `string`   `note` | The text of an optional note that a shop owner can attach to the draft order. | `string`   `email` | The email address used for sending notifications. |`string`   `currency` | The three letter code for the currency to be used for the payment. | `string`   `invoice_sent_at` | DateTime when the invoice was emailed to the customer by Shopify. | `dateTime`   `invoice_url` | The url to send to the customer so that they can complete the checkout.  When using `send_invoice`, this url is emailed to the customer. This field can be used so that an API client can use another method of communication to provide the url to the customer. | `string`   `line_item`[ ] | | array of `line_item` objects   `metafields`[ ] | | array of `metafield` objects   `shipping_line` | | `object`   `tags` | Tags are additional short descriptors, commonly used for filtering and searching, formatted as a string of comma-separated values. Each individual tag is limited to 40 characters in length. | `string`   `tax_exempt` | Sets whether taxes are exempt for this draft order. If this value is `false`, Shopify will honor the `tax_exempt` value for each `line_item`. | `boolean`   `tax_lines` | Tax lines describing the sum of each type of tax line for line items and shipping line. | array of `tax_line` objects   `discount` | Order level discount. | `string`   `taxes_included` | Shop settings taxes are included in the price | `boolean`   `total_tax` | Total tax amount | `integer`   `completed_at` | Date at which an order was created and the draft order moved to “completed” status. | `DateTime`   `created_at` | By default, this auto-generated property is the date and time when the order was created in Shopify, in ISO 8601 format. If you are importing orders to the Shopify platform from another system, the writable `processed_at` property will override the `created_at` date. | `dateTime`   `updated_at` | | `dateTime`   `status` | String describing the state of the draft order. Possible values are `open`, `invoice sent`, or `completed`. | `string`       

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Customer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, accepts_marketing=None, created_at=None, email=None, first_name=None, order_id=None, last_name=None, note=None, orders_count=None, state=None, total_spent=None, updated_at=None, tags=None):
        """
        Customer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'accepts_marketing': 'bool',
            'created_at': 'datetime',
            'email': 'str',
            'first_name': 'str',
            'order_id': 'int',
            'last_name': 'str',
            'note': 'str',
            'orders_count': 'int',
            'state': 'str',
            'total_spent': 'int',
            'updated_at': 'datetime',
            'tags': 'str'
        }

        self.attribute_map = {
            'accepts_marketing': 'accepts_marketing',
            'created_at': 'created_at',
            'email': 'email',
            'first_name': 'first_name',
            'order_id': 'order_id',
            'last_name': 'last_name',
            'note': 'note',
            'orders_count': 'orders_count',
            'state': 'state',
            'total_spent': 'total_spent',
            'updated_at': 'updated_at',
            'tags': 'tags'
        }

        self._accepts_marketing = accepts_marketing
        self._created_at = created_at
        self._email = email
        self._first_name = first_name
        self._order_id = order_id
        self._last_name = last_name
        self._note = note
        self._orders_count = orders_count
        self._state = state
        self._total_spent = total_spent
        self._updated_at = updated_at
        self._tags = tags

    @property
    def accepts_marketing(self):
        """
        Gets the accepts_marketing of this Customer.
        Indicates whether or not the customer would like to receive email updates from the shop. Valid values are `true` and `false`.

        :return: The accepts_marketing of this Customer.
        :rtype: bool
        """
        return self._accepts_marketing

    @accepts_marketing.setter
    def accepts_marketing(self, accepts_marketing):
        """
        Sets the accepts_marketing of this Customer.
        Indicates whether or not the customer would like to receive email updates from the shop. Valid values are `true` and `false`.

        :param accepts_marketing: The accepts_marketing of this Customer.
        :type: bool
        """

        self._accepts_marketing = accepts_marketing

    @property
    def created_at(self):
        """
        Gets the created_at of this Customer.
        The date and time when the customer record was created.

        :return: The created_at of this Customer.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Customer.
        The date and time when the customer record was created.

        :param created_at: The created_at of this Customer.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def email(self):
        """
        Gets the email of this Customer.
        The customer's email address.

        :return: The email of this Customer.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Customer.
        The customer's email address.

        :param email: The email of this Customer.
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this Customer.
        The customer's first name.

        :return: The first_name of this Customer.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this Customer.
        The customer's first name.

        :param first_name: The first_name of this Customer.
        :type: str
        """

        self._first_name = first_name

    @property
    def order_id(self):
        """
        Gets the order_id of this Customer.
        Unique numeric identifier for the customer.

        :return: The order_id of this Customer.
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """
        Sets the order_id of this Customer.
        Unique numeric identifier for the customer.

        :param order_id: The order_id of this Customer.
        :type: int
        """

        self._order_id = order_id

    @property
    def last_name(self):
        """
        Gets the last_name of this Customer.
        Customer's last name.

        :return: The last_name of this Customer.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this Customer.
        Customer's last name.

        :param last_name: The last_name of this Customer.
        :type: str
        """

        self._last_name = last_name

    @property
    def note(self):
        """
        Gets the note of this Customer.
        Extra information about the customer.

        :return: The note of this Customer.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """
        Sets the note of this Customer.
        Extra information about the customer.

        :param note: The note of this Customer.
        :type: str
        """

        self._note = note

    @property
    def orders_count(self):
        """
        Gets the orders_count of this Customer.
        The number of orders placed by this customer to a shop.

        :return: The orders_count of this Customer.
        :rtype: int
        """
        return self._orders_count

    @orders_count.setter
    def orders_count(self, orders_count):
        """
        Sets the orders_count of this Customer.
        The number of orders placed by this customer to a shop.

        :param orders_count: The orders_count of this Customer.
        :type: int
        """

        self._orders_count = orders_count

    @property
    def state(self):
        """
        Gets the state of this Customer.
        Description.

        :return: The state of this Customer.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Customer.
        Description.

        :param state: The state of this Customer.
        :type: str
        """

        self._state = state

    @property
    def total_spent(self):
        """
        Gets the total_spent of this Customer.
        Total amount spent by the customer.

        :return: The total_spent of this Customer.
        :rtype: int
        """
        return self._total_spent

    @total_spent.setter
    def total_spent(self, total_spent):
        """
        Sets the total_spent of this Customer.
        Total amount spent by the customer.

        :param total_spent: The total_spent of this Customer.
        :type: int
        """

        self._total_spent = total_spent

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Customer.
        The date and time when the customer record was last updated.

        :return: The updated_at of this Customer.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Customer.
        The date and time when the customer record was last updated.

        :param updated_at: The updated_at of this Customer.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def tags(self):
        """
        Gets the tags of this Customer.
        Tags are additional short descriptors, commonly used for filtering and searching, formatted as a string of comma-separated values. For example, if an order has three tags - `tag1`, `tag2`, `tag3`.

        :return: The tags of this Customer.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Customer.
        Tags are additional short descriptors, commonly used for filtering and searching, formatted as a string of comma-separated values. For example, if an order has three tags - `tag1`, `tag2`, `tag3`.

        :param tags: The tags of this Customer.
        :type: str
        """

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
