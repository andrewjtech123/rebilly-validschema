<?php
/**
 * DraftOrder
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Draft Orders API
 *
 * ### Draft Orders API       This API is about operations you can perform on the draft order object as defind below:  Field | Definition | Data Type   -----|-----------|-------------------------   `id`| `id` of the draft order |`string`   `order_id`  | The id of the order associated to the draft order, once created. | `string`           `name` | Name of the draft order, format #D<number>, where number, is an sequential identifier unique to the shop, starting at 1. For example #D133 | `integer`   `customer` | Customer object will be serialized with only the default address, however only the ID can be set in order to associate the customer to the draft order. Setting the value to null removes the customer from the draft order. | `object`   `shipping_address` | The mailing address to where the draft order will be shipped. | `string`   `billing_address` | The mailing address associated with the payment method. | `string`   `note` | The text of an optional note that a shop owner can attach to the draft order. | `string`   `email` | The email address used for sending notifications. |`string`   `currency` | The three letter code for the currency to be used for the payment. | `string`   `invoice_sent_at` | DateTime when the invoice was emailed to the customer by Shopify. | `dateTime`   `invoice_url` | The url to send to the customer so that they can complete the checkout.  When using `send_invoice`, this url is emailed to the customer. This field can be used so that an API client can use another method of communication to provide the url to the customer. | `string`   `line_item`[ ] | | array of `line_item` objects   `metafields`[ ] | | array of `metafield` objects   `shipping_line` | | `object`   `tags` | Tags are additional short descriptors, commonly used for filtering and searching, formatted as a string of comma-separated values. Each individual tag is limited to 40 characters in length. | `string`   `tax_exempt` | Sets whether taxes are exempt for this draft order. If this value is `false`, Shopify will honor the `tax_exempt` value for each `line_item`. | `boolean`   `tax_lines` | Tax lines describing the sum of each type of tax line for line items and shipping line. | array of `tax_line` objects   `discount` | Order level discount. | `string`   `taxes_included` | Shop settings taxes are included in the price | `boolean`   `total_tax` | Total tax amount | `integer`   `completed_at` | Date at which an order was created and the draft order moved to “completed” status. | `DateTime`   `created_at` | By default, this auto-generated property is the date and time when the order was created in Shopify, in ISO 8601 format. If you are importing orders to the Shopify platform from another system, the writable `processed_at` property will override the `created_at` date. | `dateTime`   `updated_at` | | `dateTime`   `status` | String describing the state of the draft order. Possible values are `open`, `invoice sent`, or `completed`. | `string`
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * DraftOrder Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DraftOrder implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DraftOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'string',
        'order_id' => 'string',
        'name' => 'string',
        'customer' => '\Swagger\Client\Model\Customer',
        'shipping_address' => 'string',
        'billing_address' => 'string',
        'note' => 'string',
        'email' => 'string',
        'currency' => 'string',
        'invoice_sent_at' => '\DateTime',
        'invoice_url' => 'string',
        'line_items' => '\Swagger\Client\Model\LineItem[]',
        'metafields' => '\Swagger\Client\Model\Metafield[]',
        'shipping_line' => 'object',
        'tags' => 'string',
        'tax_exempt' => 'bool',
        'tax_lines' => '\Swagger\Client\Model\TaxLine[]',
        'discount' => 'object',
        'taxes_included' => 'bool',
        'total_tax' => 'string',
        'subtotal_price' => 'string',
        'total_price' => 'string',
        'completed_at' => '\DateTime',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'status' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'order_id' => 'order_id',
        'name' => 'name',
        'customer' => 'customer',
        'shipping_address' => 'shipping_address',
        'billing_address' => 'billing_address',
        'note' => 'note',
        'email' => 'email',
        'currency' => 'currency',
        'invoice_sent_at' => 'invoice_sent_at',
        'invoice_url' => 'invoice_url',
        'line_items' => 'line_items',
        'metafields' => 'metafields',
        'shipping_line' => 'shipping_line',
        'tags' => 'tags',
        'tax_exempt' => 'tax_exempt',
        'tax_lines' => 'tax_lines',
        'discount' => 'discount',
        'taxes_included' => 'taxes_included',
        'total_tax' => 'total_tax',
        'subtotal_price' => 'subtotal_price',
        'total_price' => 'total_price',
        'completed_at' => 'completed_at',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'status' => 'status'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'order_id' => 'setOrderId',
        'name' => 'setName',
        'customer' => 'setCustomer',
        'shipping_address' => 'setShippingAddress',
        'billing_address' => 'setBillingAddress',
        'note' => 'setNote',
        'email' => 'setEmail',
        'currency' => 'setCurrency',
        'invoice_sent_at' => 'setInvoiceSentAt',
        'invoice_url' => 'setInvoiceUrl',
        'line_items' => 'setLineItems',
        'metafields' => 'setMetafields',
        'shipping_line' => 'setShippingLine',
        'tags' => 'setTags',
        'tax_exempt' => 'setTaxExempt',
        'tax_lines' => 'setTaxLines',
        'discount' => 'setDiscount',
        'taxes_included' => 'setTaxesIncluded',
        'total_tax' => 'setTotalTax',
        'subtotal_price' => 'setSubtotalPrice',
        'total_price' => 'setTotalPrice',
        'completed_at' => 'setCompletedAt',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'status' => 'setStatus'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'order_id' => 'getOrderId',
        'name' => 'getName',
        'customer' => 'getCustomer',
        'shipping_address' => 'getShippingAddress',
        'billing_address' => 'getBillingAddress',
        'note' => 'getNote',
        'email' => 'getEmail',
        'currency' => 'getCurrency',
        'invoice_sent_at' => 'getInvoiceSentAt',
        'invoice_url' => 'getInvoiceUrl',
        'line_items' => 'getLineItems',
        'metafields' => 'getMetafields',
        'shipping_line' => 'getShippingLine',
        'tags' => 'getTags',
        'tax_exempt' => 'getTaxExempt',
        'tax_lines' => 'getTaxLines',
        'discount' => 'getDiscount',
        'taxes_included' => 'getTaxesIncluded',
        'total_tax' => 'getTotalTax',
        'subtotal_price' => 'getSubtotalPrice',
        'total_price' => 'getTotalPrice',
        'completed_at' => 'getCompletedAt',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'status' => 'getStatus'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_OPEN = 'open';
    const STATUS_INVOICE_SENT = 'invoice_sent';
    const STATUS_COMPLETED = 'completed';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_OPEN,
            self::STATUS_INVOICE_SENT,
            self::STATUS_COMPLETED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['shipping_address'] = isset($data['shipping_address']) ? $data['shipping_address'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['invoice_sent_at'] = isset($data['invoice_sent_at']) ? $data['invoice_sent_at'] : null;
        $this->container['invoice_url'] = isset($data['invoice_url']) ? $data['invoice_url'] : null;
        $this->container['line_items'] = isset($data['line_items']) ? $data['line_items'] : null;
        $this->container['metafields'] = isset($data['metafields']) ? $data['metafields'] : null;
        $this->container['shipping_line'] = isset($data['shipping_line']) ? $data['shipping_line'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['tax_exempt'] = isset($data['tax_exempt']) ? $data['tax_exempt'] : null;
        $this->container['tax_lines'] = isset($data['tax_lines']) ? $data['tax_lines'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['taxes_included'] = isset($data['taxes_included']) ? $data['taxes_included'] : null;
        $this->container['total_tax'] = isset($data['total_tax']) ? $data['total_tax'] : null;
        $this->container['subtotal_price'] = isset($data['subtotal_price']) ? $data['subtotal_price'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['completed_at'] = isset($data['completed_at']) ? $data['completed_at'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalid_properties[] = "'currency' can't be null";
        }
        if ($this->container['line_items'] === null) {
            $invalid_properties[] = "'line_items' can't be null";
        }
        if ($this->container['tax_exempt'] === null) {
            $invalid_properties[] = "'tax_exempt' can't be null";
        }
        if ($this->container['taxes_included'] === null) {
            $invalid_properties[] = "'taxes_included' can't be null";
        }
        if ($this->container['total_tax'] === null) {
            $invalid_properties[] = "'total_tax' can't be null";
        }
        if ($this->container['subtotal_price'] === null) {
            $invalid_properties[] = "'subtotal_price' can't be null";
        }
        if ($this->container['total_price'] === null) {
            $invalid_properties[] = "'total_price' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalid_properties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalid_properties[] = "'updated_at' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        $allowed_values = array("open", "invoice_sent", "completed");
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['currency'] === null) {
            return false;
        }
        if ($this->container['line_items'] === null) {
            return false;
        }
        if ($this->container['tax_exempt'] === null) {
            return false;
        }
        if ($this->container['taxes_included'] === null) {
            return false;
        }
        if ($this->container['total_tax'] === null) {
            return false;
        }
        if ($this->container['subtotal_price'] === null) {
            return false;
        }
        if ($this->container['total_price'] === null) {
            return false;
        }
        if ($this->container['created_at'] === null) {
            return false;
        }
        if ($this->container['updated_at'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        $allowed_values = array("open", "invoice_sent", "completed");
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The `id` of the draft order.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order_id
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     * @param string $order_id The `id` of the order associated to the draft order, once created.
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name of the draft order
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets customer
     * @return \Swagger\Client\Model\Customer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     * @param \Swagger\Client\Model\Customer $customer
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets shipping_address
     * @return string
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     * @param string $shipping_address The mailing address to where the draft order will be shipped.
     * @return $this
     */
    public function setShippingAddress($shipping_address)
    {
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets billing_address
     * @return string
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     * @param string $billing_address The mailing address associated with the payment method.
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets note
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     * @param string $note The text of an optional note that a shop owner can attach to the draft order.
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email The email address used for sending notifications.
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency The three letter code for the currency to be used for the payment.
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets invoice_sent_at
     * @return \DateTime
     */
    public function getInvoiceSentAt()
    {
        return $this->container['invoice_sent_at'];
    }

    /**
     * Sets invoice_sent_at
     * @param \DateTime $invoice_sent_at Date when the invoice was emailed to the customer.
     * @return $this
     */
    public function setInvoiceSentAt($invoice_sent_at)
    {
        $this->container['invoice_sent_at'] = $invoice_sent_at;

        return $this;
    }

    /**
     * Gets invoice_url
     * @return string
     */
    public function getInvoiceUrl()
    {
        return $this->container['invoice_url'];
    }

    /**
     * Sets invoice_url
     * @param string $invoice_url The url to send to the customer for completing the checkout.  When using `send_invoice`, this url is emailed to the customer.
     * @return $this
     */
    public function setInvoiceUrl($invoice_url)
    {
        $this->container['invoice_url'] = $invoice_url;

        return $this;
    }

    /**
     * Gets line_items
     * @return \Swagger\Client\Model\LineItem[]
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     * @param \Swagger\Client\Model\LineItem[] $line_items
     * @return $this
     */
    public function setLineItems($line_items)
    {
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets metafields
     * @return \Swagger\Client\Model\Metafield[]
     */
    public function getMetafields()
    {
        return $this->container['metafields'];
    }

    /**
     * Sets metafields
     * @param \Swagger\Client\Model\Metafield[] $metafields
     * @return $this
     */
    public function setMetafields($metafields)
    {
        $this->container['metafields'] = $metafields;

        return $this;
    }

    /**
     * Gets shipping_line
     * @return object
     */
    public function getShippingLine()
    {
        return $this->container['shipping_line'];
    }

    /**
     * Sets shipping_line
     * @param object $shipping_line
     * @return $this
     */
    public function setShippingLine($shipping_line)
    {
        $this->container['shipping_line'] = $shipping_line;

        return $this;
    }

    /**
     * Gets tags
     * @return string
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string $tags Tags are additional short descriptors, commonly used for filtering and searching, formatted as a string of comma-separated values. Each individual tag is limited to 40 characters in length.
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets tax_exempt
     * @return bool
     */
    public function getTaxExempt()
    {
        return $this->container['tax_exempt'];
    }

    /**
     * Sets tax_exempt
     * @param bool $tax_exempt Sets whether taxes are exempt for this draft order. If this value is `false`, Shopify will honor the `tax_exempt` value for each `line_item`.
     * @return $this
     */
    public function setTaxExempt($tax_exempt)
    {
        $this->container['tax_exempt'] = $tax_exempt;

        return $this;
    }

    /**
     * Gets tax_lines
     * @return \Swagger\Client\Model\TaxLine[]
     */
    public function getTaxLines()
    {
        return $this->container['tax_lines'];
    }

    /**
     * Sets tax_lines
     * @param \Swagger\Client\Model\TaxLine[] $tax_lines An array of `tax_line` objects, each of which details the taxes applicable to the checkout.
     * @return $this
     */
    public function setTaxLines($tax_lines)
    {
        $this->container['tax_lines'] = $tax_lines;

        return $this;
    }

    /**
     * Gets discount
     * @return object
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     * @param object $discount
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets taxes_included
     * @return bool
     */
    public function getTaxesIncluded()
    {
        return $this->container['taxes_included'];
    }

    /**
     * Sets taxes_included
     * @param bool $taxes_included States whether or not taxes are included in the order subtotal. Valid values are `true` or `false`.
     * @return $this
     */
    public function setTaxesIncluded($taxes_included)
    {
        $this->container['taxes_included'] = $taxes_included;

        return $this;
    }

    /**
     * Gets total_tax
     * @return string
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     * @param string $total_tax Total tax amount
     * @return $this
     */
    public function setTotalTax($total_tax)
    {
        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets subtotal_price
     * @return string
     */
    public function getSubtotalPrice()
    {
        return $this->container['subtotal_price'];
    }

    /**
     * Sets subtotal_price
     * @param string $subtotal_price Subtotal after discounts, before shipping and taxes have been applied.
     * @return $this
     */
    public function setSubtotalPrice($subtotal_price)
    {
        $this->container['subtotal_price'] = $subtotal_price;

        return $this;
    }

    /**
     * Gets total_price
     * @return string
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     * @param string $total_price Includes discounts, shipping and taxes.
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets completed_at
     * @return \DateTime
     */
    public function getCompletedAt()
    {
        return $this->container['completed_at'];
    }

    /**
     * Sets completed_at
     * @param \DateTime $completed_at Date at which an order was created and the draft order moved to “completed” status.
     * @return $this
     */
    public function setCompletedAt($completed_at)
    {
        $this->container['completed_at'] = $completed_at;

        return $this;
    }

    /**
     * Gets created_at
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param \DateTime $created_at By default, this auto-generated property is the date and time when the order was created in Shopify, in ISO 8601 format. If you are importing orders to the Shopify platform from another system, the writable `processed_at` property will override the `created_at date`
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param \DateTime $updated_at The date and time when the draft order was last updated.
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status String describing the state of the draft order - `open`, `invoice sent`, `completed`.
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array('open', 'invoice_sent', 'completed');
        if (!in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'open', 'invoice_sent', 'completed'");
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


