=begin
#Draft Orders API

#### Draft Orders API       This API is about operations you can perform on the draft order object as defind below:  Field | Definition | Data Type   -----|-----------|-------------------------   `id`| `id` of the draft order |`string`   `order_id`  | The id of the order associated to the draft order, once created. | `string`           `name` | Name of the draft order, format #D<number>, where number, is an sequential identifier unique to the shop, starting at 1. For example #D133 | `integer`   `customer` | Customer object will be serialized with only the default address, however only the ID can be set in order to associate the customer to the draft order. Setting the value to null removes the customer from the draft order. | `object`   `shipping_address` | The mailing address to where the draft order will be shipped. | `string`   `billing_address` | The mailing address associated with the payment method. | `string`   `note` | The text of an optional note that a shop owner can attach to the draft order. | `string`   `email` | The email address used for sending notifications. |`string`   `currency` | The three letter code for the currency to be used for the payment. | `string`   `invoice_sent_at` | DateTime when the invoice was emailed to the customer by Shopify. | `dateTime`   `invoice_url` | The url to send to the customer so that they can complete the checkout.  When using `send_invoice`, this url is emailed to the customer. This field can be used so that an API client can use another method of communication to provide the url to the customer. | `string`   `line_item`[ ] | | array of `line_item` objects   `metafields`[ ] | | array of `metafield` objects   `shipping_line` | | `object`   `tags` | Tags are additional short descriptors, commonly used for filtering and searching, formatted as a string of comma-separated values. Each individual tag is limited to 40 characters in length. | `string`   `tax_exempt` | Sets whether taxes are exempt for this draft order. If this value is `false`, Shopify will honor the `tax_exempt` value for each `line_item`. | `boolean`   `tax_lines` | Tax lines describing the sum of each type of tax line for line items and shipping line. | array of `tax_line` objects   `discount` | Order level discount. | `string`   `taxes_included` | Shop settings taxes are included in the price | `boolean`   `total_tax` | Total tax amount | `integer`   `completed_at` | Date at which an order was created and the draft order moved to “completed” status. | `DateTime`   `created_at` | By default, this auto-generated property is the date and time when the order was created in Shopify, in ISO 8601 format. If you are importing orders to the Shopify platform from another system, the writable `processed_at` property will override the `created_at` date. | `dateTime`   `updated_at` | | `dateTime`   `status` | String describing the state of the draft order. Possible values are `open`, `invoice sent`, or `completed`. | `string`       

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'date'

module SwaggerClient

  class LineItem
    # Can’t be null
    attr_accessor :id

    # The `id` of the product variant corresponding to the `line_item`.
    attr_accessor :variant_id

    # The `id` of the product corresponding to the line item’s product variant.
    attr_accessor :product_id

    # The readable name of the product and variant.
    attr_accessor :name

    # The title of the product or variant.  Can only be specified if this is a custom line item, in which case it is mandatory.
    attr_accessor :title

    # The title of the product variant.  Default value is “Custom”
    attr_accessor :variant_title

    # The price of the item before discounts have been applied.  Can only be specified if this is a custom line item, in which case it is mandatory.  To change the price of a product, use `discount` as specified below.
    attr_accessor :price

    # vendor
    attr_accessor :vendor

    # Weight in grams.  Can only be specified if this is a custom line item.  If not specified, defaults to `0`.
    attr_accessor :grams

    # quantity
    attr_accessor :quantity

    # States whether or not the fulfillment requires shipping. Values are `true` or `false`.  Can only be specified if this is a custom line item.  Defaults to `false`.
    attr_accessor :requires_shipping

    # Can only be specified if this is a custom line item.
    attr_accessor :sku

    # States whether or not the product is taxable. Values are `true` or `false`.  Can only be specified if this is a custom line item.  Mandatory for custom products.
    attr_accessor :taxable

    # Indicates if the product is a gift card. Values - `true` or `false`.
    attr_accessor :gift_card

    # Service provider who is doing the fulfillment. Valid values are either `manual` or the name of the provider. eg `amazon`, `shipwire`, etc.  Defaults to `manual` for custom line items.
    attr_accessor :fulfillment_service

    # An array of custom information for an item that has been added to the cart. Often used to provide product customization options. For more information, see the [documentation on collecting customization information on the product page] (https://help.shopify.com/themes/customization/products/get-customization-information-for-products)
    attr_accessor :properties

    # Indicates if the line item is a custom line item.  `false` if the line item is a product variant, `true` if the line item is `custom`.
    attr_accessor :custom

    attr_accessor :discount

    attr_accessor :tax_line


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'variant_id' => :'variant_id',
        :'product_id' => :'product_id',
        :'name' => :'name',
        :'title' => :'title',
        :'variant_title' => :'variant_title',
        :'price' => :'price',
        :'vendor' => :'vendor',
        :'grams' => :'grams',
        :'quantity' => :'quantity',
        :'requires_shipping' => :'requires_shipping',
        :'sku' => :'sku',
        :'taxable' => :'taxable',
        :'gift_card' => :'gift_card',
        :'fulfillment_service' => :'fulfillment_service',
        :'properties' => :'properties',
        :'custom' => :'custom',
        :'discount' => :'discount',
        :'tax_line' => :'tax_line'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'variant_id' => :'String',
        :'product_id' => :'String',
        :'name' => :'String',
        :'title' => :'String',
        :'variant_title' => :'String',
        :'price' => :'String',
        :'vendor' => :'String',
        :'grams' => :'String',
        :'quantity' => :'String',
        :'requires_shipping' => :'BOOLEAN',
        :'sku' => :'String',
        :'taxable' => :'BOOLEAN',
        :'gift_card' => :'BOOLEAN',
        :'fulfillment_service' => :'String',
        :'properties' => :'String',
        :'custom' => :'BOOLEAN',
        :'discount' => :'Object',
        :'tax_line' => :'Array<TaxLine>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'variant_id')
        self.variant_id = attributes[:'variant_id']
      end

      if attributes.has_key?(:'product_id')
        self.product_id = attributes[:'product_id']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.has_key?(:'variant_title')
        self.variant_title = attributes[:'variant_title']
      end

      if attributes.has_key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.has_key?(:'vendor')
        self.vendor = attributes[:'vendor']
      end

      if attributes.has_key?(:'grams')
        self.grams = attributes[:'grams']
      end

      if attributes.has_key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.has_key?(:'requires_shipping')
        self.requires_shipping = attributes[:'requires_shipping']
      end

      if attributes.has_key?(:'sku')
        self.sku = attributes[:'sku']
      end

      if attributes.has_key?(:'taxable')
        self.taxable = attributes[:'taxable']
      end

      if attributes.has_key?(:'gift_card')
        self.gift_card = attributes[:'gift_card']
      end

      if attributes.has_key?(:'fulfillment_service')
        self.fulfillment_service = attributes[:'fulfillment_service']
      end

      if attributes.has_key?(:'properties')
        self.properties = attributes[:'properties']
      end

      if attributes.has_key?(:'custom')
        self.custom = attributes[:'custom']
      end

      if attributes.has_key?(:'discount')
        self.discount = attributes[:'discount']
      end

      if attributes.has_key?(:'tax_line')
        if (value = attributes[:'tax_line']).is_a?(Array)
          self.tax_line = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @name.nil?
      return false if @quantity.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          variant_id == o.variant_id &&
          product_id == o.product_id &&
          name == o.name &&
          title == o.title &&
          variant_title == o.variant_title &&
          price == o.price &&
          vendor == o.vendor &&
          grams == o.grams &&
          quantity == o.quantity &&
          requires_shipping == o.requires_shipping &&
          sku == o.sku &&
          taxable == o.taxable &&
          gift_card == o.gift_card &&
          fulfillment_service == o.fulfillment_service &&
          properties == o.properties &&
          custom == o.custom &&
          discount == o.discount &&
          tax_line == o.tax_line
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, variant_id, product_id, name, title, variant_title, price, vendor, grams, quantity, requires_shipping, sku, taxable, gift_card, fulfillment_service, properties, custom, discount, tax_line].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
