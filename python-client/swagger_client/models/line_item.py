# coding: utf-8

"""
    Draft Orders API

    ### Draft Orders API       This API is about operations you can perform on the draft order object as defind below:  Field | Definition | Data Type   -----|-----------|-------------------------   `id`| `id` of the draft order |`string`   `order_id`  | The id of the order associated to the draft order, once created. | `string`           `name` | Name of the draft order, format #D<number>, where number, is an sequential identifier unique to the shop, starting at 1. For example #D133 | `integer`   `customer` | Customer object will be serialized with only the default address, however only the ID can be set in order to associate the customer to the draft order. Setting the value to null removes the customer from the draft order. | `object`   `shipping_address` | The mailing address to where the draft order will be shipped. | `string`   `billing_address` | The mailing address associated with the payment method. | `string`   `note` | The text of an optional note that a shop owner can attach to the draft order. | `string`   `email` | The email address used for sending notifications. |`string`   `currency` | The three letter code for the currency to be used for the payment. | `string`   `invoice_sent_at` | DateTime when the invoice was emailed to the customer by Shopify. | `dateTime`   `invoice_url` | The url to send to the customer so that they can complete the checkout.  When using `send_invoice`, this url is emailed to the customer. This field can be used so that an API client can use another method of communication to provide the url to the customer. | `string`   `line_item`[ ] | | array of `line_item` objects   `metafields`[ ] | | array of `metafield` objects   `shipping_line` | | `object`   `tags` | Tags are additional short descriptors, commonly used for filtering and searching, formatted as a string of comma-separated values. Each individual tag is limited to 40 characters in length. | `string`   `tax_exempt` | Sets whether taxes are exempt for this draft order. If this value is `false`, Shopify will honor the `tax_exempt` value for each `line_item`. | `boolean`   `tax_lines` | Tax lines describing the sum of each type of tax line for line items and shipping line. | array of `tax_line` objects   `discount` | Order level discount. | `string`   `taxes_included` | Shop settings taxes are included in the price | `boolean`   `total_tax` | Total tax amount | `integer`   `completed_at` | Date at which an order was created and the draft order moved to “completed” status. | `DateTime`   `created_at` | By default, this auto-generated property is the date and time when the order was created in Shopify, in ISO 8601 format. If you are importing orders to the Shopify platform from another system, the writable `processed_at` property will override the `created_at` date. | `dateTime`   `updated_at` | | `dateTime`   `status` | String describing the state of the draft order. Possible values are `open`, `invoice sent`, or `completed`. | `string`       

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class LineItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, variant_id=None, product_id=None, name=None, title=None, variant_title=None, price=None, vendor=None, grams=None, quantity=None, requires_shipping=None, sku=None, taxable=None, gift_card=None, fulfillment_service=None, properties=None, discount=None, tax_line=None):
        """
        LineItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'variant_id': 'str',
            'product_id': 'str',
            'name': 'str',
            'title': 'str',
            'variant_title': 'str',
            'price': 'str',
            'vendor': 'str',
            'grams': 'str',
            'quantity': 'str',
            'requires_shipping': 'bool',
            'sku': 'str',
            'taxable': 'bool',
            'gift_card': 'bool',
            'fulfillment_service': 'str',
            'properties': 'str',
            'custom': 'bool',
            'discount': 'object',
            'tax_line': 'list[TaxLine]'
        }

        self.attribute_map = {
            'id': 'id',
            'variant_id': 'variant_id',
            'product_id': 'product_id',
            'name': 'name',
            'title': 'title',
            'variant_title': 'variant_title',
            'price': 'price',
            'vendor': 'vendor',
            'grams': 'grams',
            'quantity': 'quantity',
            'requires_shipping': 'requires_shipping',
            'sku': 'sku',
            'taxable': 'taxable',
            'gift_card': 'gift_card',
            'fulfillment_service': 'fulfillment_service',
            'properties': 'properties',
            'custom': 'custom',
            'discount': 'discount',
            'tax_line': 'tax_line'
        }

        self._id = None
        self._custom = None
        self._variant_id = variant_id
        self._product_id = product_id
        self._name = name
        self._title = title
        self._variant_title = variant_title
        self._price = price
        self._vendor = vendor
        self._grams = grams
        self._quantity = quantity
        self._requires_shipping = requires_shipping
        self._sku = sku
        self._taxable = taxable
        self._gift_card = gift_card
        self._fulfillment_service = fulfillment_service
        self._properties = properties
        self._discount = discount
        self._tax_line = tax_line

    @property
    def id(self):
        """
        Gets the id of this LineItem.
        Can’t be null

        :return: The id of this LineItem.
        :rtype: str
        """
        return self._id

    @property
    def variant_id(self):
        """
        Gets the variant_id of this LineItem.
        The `id` of the product variant corresponding to the `line_item`.

        :return: The variant_id of this LineItem.
        :rtype: str
        """
        return self._variant_id

    @variant_id.setter
    def variant_id(self, variant_id):
        """
        Sets the variant_id of this LineItem.
        The `id` of the product variant corresponding to the `line_item`.

        :param variant_id: The variant_id of this LineItem.
        :type: str
        """

        self._variant_id = variant_id

    @property
    def product_id(self):
        """
        Gets the product_id of this LineItem.
        The `id` of the product corresponding to the line item’s product variant.

        :return: The product_id of this LineItem.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this LineItem.
        The `id` of the product corresponding to the line item’s product variant.

        :param product_id: The product_id of this LineItem.
        :type: str
        """

        self._product_id = product_id

    @property
    def name(self):
        """
        Gets the name of this LineItem.
        The readable name of the product and variant.

        :return: The name of this LineItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LineItem.
        The readable name of the product and variant.

        :param name: The name of this LineItem.
        :type: str
        """

        self._name = name

    @property
    def title(self):
        """
        Gets the title of this LineItem.
        The title of the product or variant.  Can only be specified if this is a custom line item, in which case it is mandatory.

        :return: The title of this LineItem.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this LineItem.
        The title of the product or variant.  Can only be specified if this is a custom line item, in which case it is mandatory.

        :param title: The title of this LineItem.
        :type: str
        """

        self._title = title

    @property
    def variant_title(self):
        """
        Gets the variant_title of this LineItem.
        The title of the product variant.  Default value is “Custom”

        :return: The variant_title of this LineItem.
        :rtype: str
        """
        return self._variant_title

    @variant_title.setter
    def variant_title(self, variant_title):
        """
        Sets the variant_title of this LineItem.
        The title of the product variant.  Default value is “Custom”

        :param variant_title: The variant_title of this LineItem.
        :type: str
        """

        self._variant_title = variant_title

    @property
    def price(self):
        """
        Gets the price of this LineItem.
        The price of the item before discounts have been applied.  Can only be specified if this is a custom line item, in which case it is mandatory.  To change the price of a product, use `discount` as specified below.

        :return: The price of this LineItem.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this LineItem.
        The price of the item before discounts have been applied.  Can only be specified if this is a custom line item, in which case it is mandatory.  To change the price of a product, use `discount` as specified below.

        :param price: The price of this LineItem.
        :type: str
        """

        self._price = price

    @property
    def vendor(self):
        """
        Gets the vendor of this LineItem.
        vendor

        :return: The vendor of this LineItem.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """
        Sets the vendor of this LineItem.
        vendor

        :param vendor: The vendor of this LineItem.
        :type: str
        """

        self._vendor = vendor

    @property
    def grams(self):
        """
        Gets the grams of this LineItem.
        Weight in grams.  Can only be specified if this is a custom line item.  If not specified, defaults to `0`.

        :return: The grams of this LineItem.
        :rtype: str
        """
        return self._grams

    @grams.setter
    def grams(self, grams):
        """
        Sets the grams of this LineItem.
        Weight in grams.  Can only be specified if this is a custom line item.  If not specified, defaults to `0`.

        :param grams: The grams of this LineItem.
        :type: str
        """

        self._grams = grams

    @property
    def quantity(self):
        """
        Gets the quantity of this LineItem.
        quantity

        :return: The quantity of this LineItem.
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this LineItem.
        quantity

        :param quantity: The quantity of this LineItem.
        :type: str
        """

        self._quantity = quantity

    @property
    def requires_shipping(self):
        """
        Gets the requires_shipping of this LineItem.
        States whether or not the fulfillment requires shipping. Values are `true` or `false`.  Can only be specified if this is a custom line item.  Defaults to `false`.

        :return: The requires_shipping of this LineItem.
        :rtype: bool
        """
        return self._requires_shipping

    @requires_shipping.setter
    def requires_shipping(self, requires_shipping):
        """
        Sets the requires_shipping of this LineItem.
        States whether or not the fulfillment requires shipping. Values are `true` or `false`.  Can only be specified if this is a custom line item.  Defaults to `false`.

        :param requires_shipping: The requires_shipping of this LineItem.
        :type: bool
        """

        self._requires_shipping = requires_shipping

    @property
    def sku(self):
        """
        Gets the sku of this LineItem.
        Can only be specified if this is a custom line item.

        :return: The sku of this LineItem.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this LineItem.
        Can only be specified if this is a custom line item.

        :param sku: The sku of this LineItem.
        :type: str
        """

        self._sku = sku

    @property
    def taxable(self):
        """
        Gets the taxable of this LineItem.
        States whether or not the product is taxable. Values are `true` or `false`.  Can only be specified if this is a custom line item.  Mandatory for custom products.

        :return: The taxable of this LineItem.
        :rtype: bool
        """
        return self._taxable

    @taxable.setter
    def taxable(self, taxable):
        """
        Sets the taxable of this LineItem.
        States whether or not the product is taxable. Values are `true` or `false`.  Can only be specified if this is a custom line item.  Mandatory for custom products.

        :param taxable: The taxable of this LineItem.
        :type: bool
        """

        self._taxable = taxable

    @property
    def gift_card(self):
        """
        Gets the gift_card of this LineItem.
        Indicates if the product is a gift card. Values - `true` or `false`.

        :return: The gift_card of this LineItem.
        :rtype: bool
        """
        return self._gift_card

    @gift_card.setter
    def gift_card(self, gift_card):
        """
        Sets the gift_card of this LineItem.
        Indicates if the product is a gift card. Values - `true` or `false`.

        :param gift_card: The gift_card of this LineItem.
        :type: bool
        """

        self._gift_card = gift_card

    @property
    def fulfillment_service(self):
        """
        Gets the fulfillment_service of this LineItem.
        Service provider who is doing the fulfillment. Valid values are either `manual` or the name of the provider. eg `amazon`, `shipwire`, etc.  Defaults to `manual` for custom line items.

        :return: The fulfillment_service of this LineItem.
        :rtype: str
        """
        return self._fulfillment_service

    @fulfillment_service.setter
    def fulfillment_service(self, fulfillment_service):
        """
        Sets the fulfillment_service of this LineItem.
        Service provider who is doing the fulfillment. Valid values are either `manual` or the name of the provider. eg `amazon`, `shipwire`, etc.  Defaults to `manual` for custom line items.

        :param fulfillment_service: The fulfillment_service of this LineItem.
        :type: str
        """

        self._fulfillment_service = fulfillment_service

    @property
    def properties(self):
        """
        Gets the properties of this LineItem.
        An array of custom information for an item that has been added to the cart. Often used to provide product customization options. For more information, see the [documentation on collecting customization information on the product page] (https://help.shopify.com/themes/customization/products/get-customization-information-for-products)

        :return: The properties of this LineItem.
        :rtype: str
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this LineItem.
        An array of custom information for an item that has been added to the cart. Often used to provide product customization options. For more information, see the [documentation on collecting customization information on the product page] (https://help.shopify.com/themes/customization/products/get-customization-information-for-products)

        :param properties: The properties of this LineItem.
        :type: str
        """

        self._properties = properties

    @property
    def custom(self):
        """
        Gets the custom of this LineItem.
        Indicates if the line item is a custom line item.  `false` if the line item is a product variant, `true` if the line item is `custom`.

        :return: The custom of this LineItem.
        :rtype: bool
        """
        return self._custom

    @property
    def discount(self):
        """
        Gets the discount of this LineItem.


        :return: The discount of this LineItem.
        :rtype: object
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """
        Sets the discount of this LineItem.


        :param discount: The discount of this LineItem.
        :type: object
        """

        self._discount = discount

    @property
    def tax_line(self):
        """
        Gets the tax_line of this LineItem.


        :return: The tax_line of this LineItem.
        :rtype: list[TaxLine]
        """
        return self._tax_line

    @tax_line.setter
    def tax_line(self, tax_line):
        """
        Sets the tax_line of this LineItem.


        :param tax_line: The tax_line of this LineItem.
        :type: list[TaxLine]
        """

        self._tax_line = tax_line

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
