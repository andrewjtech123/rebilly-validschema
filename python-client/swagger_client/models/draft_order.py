# coding: utf-8

"""
    Draft Orders API

    ### Draft Orders API       This API is about operations you can perform on the draft order object as defind below:  Field | Definition | Data Type   -----|-----------|-------------------------   `id`| `id` of the draft order |`string`   `order_id`  | The id of the order associated to the draft order, once created. | `string`           `name` | Name of the draft order, format #D<number>, where number, is an sequential identifier unique to the shop, starting at 1. For example #D133 | `integer`   `customer` | Customer object will be serialized with only the default address, however only the ID can be set in order to associate the customer to the draft order. Setting the value to null removes the customer from the draft order. | `object`   `shipping_address` | The mailing address to where the draft order will be shipped. | `string`   `billing_address` | The mailing address associated with the payment method. | `string`   `note` | The text of an optional note that a shop owner can attach to the draft order. | `string`   `email` | The email address used for sending notifications. |`string`   `currency` | The three letter code for the currency to be used for the payment. | `string`   `invoice_sent_at` | DateTime when the invoice was emailed to the customer by Shopify. | `dateTime`   `invoice_url` | The url to send to the customer so that they can complete the checkout.  When using `send_invoice`, this url is emailed to the customer. This field can be used so that an API client can use another method of communication to provide the url to the customer. | `string`   `line_item`[ ] | | array of `line_item` objects   `metafields`[ ] | | array of `metafield` objects   `shipping_line` | | `object`   `tags` | Tags are additional short descriptors, commonly used for filtering and searching, formatted as a string of comma-separated values. Each individual tag is limited to 40 characters in length. | `string`   `tax_exempt` | Sets whether taxes are exempt for this draft order. If this value is `false`, Shopify will honor the `tax_exempt` value for each `line_item`. | `boolean`   `tax_lines` | Tax lines describing the sum of each type of tax line for line items and shipping line. | array of `tax_line` objects   `discount` | Order level discount. | `string`   `taxes_included` | Shop settings taxes are included in the price | `boolean`   `total_tax` | Total tax amount | `integer`   `completed_at` | Date at which an order was created and the draft order moved to “completed” status. | `DateTime`   `created_at` | By default, this auto-generated property is the date and time when the order was created in Shopify, in ISO 8601 format. If you are importing orders to the Shopify platform from another system, the writable `processed_at` property will override the `created_at` date. | `dateTime`   `updated_at` | | `dateTime`   `status` | String describing the state of the draft order. Possible values are `open`, `invoice sent`, or `completed`. | `string`       

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class DraftOrder(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, customer=None, shipping_address=None, billing_address=None, note=None, email=None, line_items=None, metafields=None, shipping_line=None, tags=None, tax_exempt=None, tax_lines=None, discount=None):
        """
        DraftOrder - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'order_id': 'str',
            'name': 'str',
            'customer': 'Customer',
            'shipping_address': 'str',
            'billing_address': 'str',
            'note': 'str',
            'email': 'str',
            'currency': 'str',
            'invoice_sent_at': 'datetime',
            'invoice_url': 'str',
            'line_items': 'list[LineItem]',
            'metafields': 'list[Metafield]',
            'shipping_line': 'object',
            'tags': 'str',
            'tax_exempt': 'bool',
            'tax_lines': 'list[TaxLine]',
            'discount': 'object',
            'taxes_included': 'bool',
            'total_tax': 'str',
            'subtotal_price': 'str',
            'total_price': 'str',
            'completed_at': 'datetime',
            'created_at': 'datetime',
            'updated_at': 'datetime',
            'status': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'order_id': 'order_id',
            'name': 'name',
            'customer': 'customer',
            'shipping_address': 'shipping_address',
            'billing_address': 'billing_address',
            'note': 'note',
            'email': 'email',
            'currency': 'currency',
            'invoice_sent_at': 'invoice_sent_at',
            'invoice_url': 'invoice_url',
            'line_items': 'line_items',
            'metafields': 'metafields',
            'shipping_line': 'shipping_line',
            'tags': 'tags',
            'tax_exempt': 'tax_exempt',
            'tax_lines': 'tax_lines',
            'discount': 'discount',
            'taxes_included': 'taxes_included',
            'total_tax': 'total_tax',
            'subtotal_price': 'subtotal_price',
            'total_price': 'total_price',
            'completed_at': 'completed_at',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'status': 'status'
        }

        self._id = None
        self._order_id = None
        self._name = None
        self._currency = None
        self._invoice_sent_at = None
        self._invoice_url = None
        self._taxes_included = None
        self._total_tax = None
        self._subtotal_price = None
        self._total_price = None
        self._completed_at = None
        self._created_at = None
        self._updated_at = None
        self._status = None
        self._customer = customer
        self._shipping_address = shipping_address
        self._billing_address = billing_address
        self._note = note
        self._email = email
        self._line_items = line_items
        self._metafields = metafields
        self._shipping_line = shipping_line
        self._tags = tags
        self._tax_exempt = tax_exempt
        self._tax_lines = tax_lines
        self._discount = discount

    @property
    def id(self):
        """
        Gets the id of this DraftOrder.
        The `id` of the draft order.

        :return: The id of this DraftOrder.
        :rtype: str
        """
        return self._id

    @property
    def order_id(self):
        """
        Gets the order_id of this DraftOrder.
        The `id` of the order associated to the draft order, once created.

        :return: The order_id of this DraftOrder.
        :rtype: str
        """
        return self._order_id

    @property
    def name(self):
        """
        Gets the name of this DraftOrder.
        Name of the draft order

        :return: The name of this DraftOrder.
        :rtype: str
        """
        return self._name

    @property
    def customer(self):
        """
        Gets the customer of this DraftOrder.


        :return: The customer of this DraftOrder.
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """
        Sets the customer of this DraftOrder.


        :param customer: The customer of this DraftOrder.
        :type: Customer
        """

        self._customer = customer

    @property
    def shipping_address(self):
        """
        Gets the shipping_address of this DraftOrder.
        The mailing address to where the draft order will be shipped.

        :return: The shipping_address of this DraftOrder.
        :rtype: str
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """
        Sets the shipping_address of this DraftOrder.
        The mailing address to where the draft order will be shipped.

        :param shipping_address: The shipping_address of this DraftOrder.
        :type: str
        """

        self._shipping_address = shipping_address

    @property
    def billing_address(self):
        """
        Gets the billing_address of this DraftOrder.
        The mailing address associated with the payment method.

        :return: The billing_address of this DraftOrder.
        :rtype: str
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """
        Sets the billing_address of this DraftOrder.
        The mailing address associated with the payment method.

        :param billing_address: The billing_address of this DraftOrder.
        :type: str
        """

        self._billing_address = billing_address

    @property
    def note(self):
        """
        Gets the note of this DraftOrder.
        The text of an optional note that a shop owner can attach to the draft order.

        :return: The note of this DraftOrder.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """
        Sets the note of this DraftOrder.
        The text of an optional note that a shop owner can attach to the draft order.

        :param note: The note of this DraftOrder.
        :type: str
        """

        self._note = note

    @property
    def email(self):
        """
        Gets the email of this DraftOrder.
        The email address used for sending notifications.

        :return: The email of this DraftOrder.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this DraftOrder.
        The email address used for sending notifications.

        :param email: The email of this DraftOrder.
        :type: str
        """

        self._email = email

    @property
    def currency(self):
        """
        Gets the currency of this DraftOrder.
        The three letter code for the currency to be used for the payment.

        :return: The currency of this DraftOrder.
        :rtype: str
        """
        return self._currency

    @property
    def invoice_sent_at(self):
        """
        Gets the invoice_sent_at of this DraftOrder.
        Date when the invoice was emailed to the customer.

        :return: The invoice_sent_at of this DraftOrder.
        :rtype: datetime
        """
        return self._invoice_sent_at

    @property
    def invoice_url(self):
        """
        Gets the invoice_url of this DraftOrder.
        The url to send to the customer for completing the checkout.  When using `send_invoice`, this url is emailed to the customer.

        :return: The invoice_url of this DraftOrder.
        :rtype: str
        """
        return self._invoice_url

    @property
    def line_items(self):
        """
        Gets the line_items of this DraftOrder.


        :return: The line_items of this DraftOrder.
        :rtype: list[LineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """
        Sets the line_items of this DraftOrder.


        :param line_items: The line_items of this DraftOrder.
        :type: list[LineItem]
        """

        self._line_items = line_items

    @property
    def metafields(self):
        """
        Gets the metafields of this DraftOrder.


        :return: The metafields of this DraftOrder.
        :rtype: list[Metafield]
        """
        return self._metafields

    @metafields.setter
    def metafields(self, metafields):
        """
        Sets the metafields of this DraftOrder.


        :param metafields: The metafields of this DraftOrder.
        :type: list[Metafield]
        """

        self._metafields = metafields

    @property
    def shipping_line(self):
        """
        Gets the shipping_line of this DraftOrder.


        :return: The shipping_line of this DraftOrder.
        :rtype: object
        """
        return self._shipping_line

    @shipping_line.setter
    def shipping_line(self, shipping_line):
        """
        Sets the shipping_line of this DraftOrder.


        :param shipping_line: The shipping_line of this DraftOrder.
        :type: object
        """

        self._shipping_line = shipping_line

    @property
    def tags(self):
        """
        Gets the tags of this DraftOrder.
        Tags are additional short descriptors, commonly used for filtering and searching, formatted as a string of comma-separated values. Each individual tag is limited to 40 characters in length.

        :return: The tags of this DraftOrder.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this DraftOrder.
        Tags are additional short descriptors, commonly used for filtering and searching, formatted as a string of comma-separated values. Each individual tag is limited to 40 characters in length.

        :param tags: The tags of this DraftOrder.
        :type: str
        """

        self._tags = tags

    @property
    def tax_exempt(self):
        """
        Gets the tax_exempt of this DraftOrder.
        Sets whether taxes are exempt for this draft order. If this value is `false`, Shopify will honor the `tax_exempt` value for each `line_item`.

        :return: The tax_exempt of this DraftOrder.
        :rtype: bool
        """
        return self._tax_exempt

    @tax_exempt.setter
    def tax_exempt(self, tax_exempt):
        """
        Sets the tax_exempt of this DraftOrder.
        Sets whether taxes are exempt for this draft order. If this value is `false`, Shopify will honor the `tax_exempt` value for each `line_item`.

        :param tax_exempt: The tax_exempt of this DraftOrder.
        :type: bool
        """

        self._tax_exempt = tax_exempt

    @property
    def tax_lines(self):
        """
        Gets the tax_lines of this DraftOrder.
        An array of `tax_line` objects, each of which details the taxes applicable to the checkout.

        :return: The tax_lines of this DraftOrder.
        :rtype: list[TaxLine]
        """
        return self._tax_lines

    @tax_lines.setter
    def tax_lines(self, tax_lines):
        """
        Sets the tax_lines of this DraftOrder.
        An array of `tax_line` objects, each of which details the taxes applicable to the checkout.

        :param tax_lines: The tax_lines of this DraftOrder.
        :type: list[TaxLine]
        """

        self._tax_lines = tax_lines

    @property
    def discount(self):
        """
        Gets the discount of this DraftOrder.


        :return: The discount of this DraftOrder.
        :rtype: object
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """
        Sets the discount of this DraftOrder.


        :param discount: The discount of this DraftOrder.
        :type: object
        """

        self._discount = discount

    @property
    def taxes_included(self):
        """
        Gets the taxes_included of this DraftOrder.
        States whether or not taxes are included in the order subtotal. Valid values are `true` or `false`.

        :return: The taxes_included of this DraftOrder.
        :rtype: bool
        """
        return self._taxes_included

    @property
    def total_tax(self):
        """
        Gets the total_tax of this DraftOrder.
        Total tax amount

        :return: The total_tax of this DraftOrder.
        :rtype: str
        """
        return self._total_tax

    @property
    def subtotal_price(self):
        """
        Gets the subtotal_price of this DraftOrder.
        Subtotal after discounts, before shipping and taxes have been applied.

        :return: The subtotal_price of this DraftOrder.
        :rtype: str
        """
        return self._subtotal_price

    @property
    def total_price(self):
        """
        Gets the total_price of this DraftOrder.
        Includes discounts, shipping and taxes.

        :return: The total_price of this DraftOrder.
        :rtype: str
        """
        return self._total_price

    @property
    def completed_at(self):
        """
        Gets the completed_at of this DraftOrder.
        Date at which an order was created and the draft order moved to “completed” status.

        :return: The completed_at of this DraftOrder.
        :rtype: datetime
        """
        return self._completed_at

    @property
    def created_at(self):
        """
        Gets the created_at of this DraftOrder.
        By default, this auto-generated property is the date and time when the order was created in Shopify, in ISO 8601 format. If you are importing orders to the Shopify platform from another system, the writable `processed_at` property will override the `created_at date`

        :return: The created_at of this DraftOrder.
        :rtype: datetime
        """
        return self._created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this DraftOrder.
        The date and time when the draft order was last updated.

        :return: The updated_at of this DraftOrder.
        :rtype: datetime
        """
        return self._updated_at

    @property
    def status(self):
        """
        Gets the status of this DraftOrder.
        String describing the state of the draft order - `open`, `invoice sent`, `completed`.

        :return: The status of this DraftOrder.
        :rtype: str
        """
        return self._status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
